/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkpapersRouteImport } from './routes/workpapers'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ExceptionsRouteImport } from './routes/exceptions'
import { Route as EvidenceRouteImport } from './routes/evidence'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as CuecMappingRouteImport } from './routes/cuec-mapping'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ControlsIndexRouteImport } from './routes/controls.index'
import { Route as WorkpapersGenerateRouteImport } from './routes/workpapers/generate'
import { Route as ControlsLayoutRouteImport } from './routes/controls.layout'
import { Route as ControlsCreateRouteImport } from './routes/controls/create'
import { Route as WorkpapersReportsIdRouteImport } from './routes/workpapers/reports/$id'

const WorkpapersRoute = WorkpapersRouteImport.update({
  id: '/workpapers',
  path: '/workpapers',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ExceptionsRoute = ExceptionsRouteImport.update({
  id: '/exceptions',
  path: '/exceptions',
  getParentRoute: () => rootRouteImport,
} as any)
const EvidenceRoute = EvidenceRouteImport.update({
  id: '/evidence',
  path: '/evidence',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CuecMappingRoute = CuecMappingRouteImport.update({
  id: '/cuec-mapping',
  path: '/cuec-mapping',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ControlsIndexRoute = ControlsIndexRouteImport.update({
  id: '/controls/',
  path: '/controls/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkpapersGenerateRoute = WorkpapersGenerateRouteImport.update({
  id: '/generate',
  path: '/generate',
  getParentRoute: () => WorkpapersRoute,
} as any)
const ControlsLayoutRoute = ControlsLayoutRouteImport.update({
  id: '/controls/layout',
  path: '/controls/layout',
  getParentRoute: () => rootRouteImport,
} as any)
const ControlsCreateRoute = ControlsCreateRouteImport.update({
  id: '/controls/create',
  path: '/controls/create',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkpapersReportsIdRoute = WorkpapersReportsIdRouteImport.update({
  id: '/reports/$id',
  path: '/reports/$id',
  getParentRoute: () => WorkpapersRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cuec-mapping': typeof CuecMappingRoute
  '/dashboard': typeof DashboardRoute
  '/evidence': typeof EvidenceRoute
  '/exceptions': typeof ExceptionsRoute
  '/login': typeof LoginRoute
  '/settings': typeof SettingsRoute
  '/workpapers': typeof WorkpapersRouteWithChildren
  '/controls/create': typeof ControlsCreateRoute
  '/controls/layout': typeof ControlsLayoutRoute
  '/workpapers/generate': typeof WorkpapersGenerateRoute
  '/controls': typeof ControlsIndexRoute
  '/workpapers/reports/$id': typeof WorkpapersReportsIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cuec-mapping': typeof CuecMappingRoute
  '/dashboard': typeof DashboardRoute
  '/evidence': typeof EvidenceRoute
  '/exceptions': typeof ExceptionsRoute
  '/login': typeof LoginRoute
  '/settings': typeof SettingsRoute
  '/workpapers': typeof WorkpapersRouteWithChildren
  '/controls/create': typeof ControlsCreateRoute
  '/controls/layout': typeof ControlsLayoutRoute
  '/workpapers/generate': typeof WorkpapersGenerateRoute
  '/controls': typeof ControlsIndexRoute
  '/workpapers/reports/$id': typeof WorkpapersReportsIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cuec-mapping': typeof CuecMappingRoute
  '/dashboard': typeof DashboardRoute
  '/evidence': typeof EvidenceRoute
  '/exceptions': typeof ExceptionsRoute
  '/login': typeof LoginRoute
  '/settings': typeof SettingsRoute
  '/workpapers': typeof WorkpapersRouteWithChildren
  '/controls/create': typeof ControlsCreateRoute
  '/controls/layout': typeof ControlsLayoutRoute
  '/workpapers/generate': typeof WorkpapersGenerateRoute
  '/controls/': typeof ControlsIndexRoute
  '/workpapers/reports/$id': typeof WorkpapersReportsIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cuec-mapping'
    | '/dashboard'
    | '/evidence'
    | '/exceptions'
    | '/login'
    | '/settings'
    | '/workpapers'
    | '/controls/create'
    | '/controls/layout'
    | '/workpapers/generate'
    | '/controls'
    | '/workpapers/reports/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cuec-mapping'
    | '/dashboard'
    | '/evidence'
    | '/exceptions'
    | '/login'
    | '/settings'
    | '/workpapers'
    | '/controls/create'
    | '/controls/layout'
    | '/workpapers/generate'
    | '/controls'
    | '/workpapers/reports/$id'
  id:
    | '__root__'
    | '/'
    | '/cuec-mapping'
    | '/dashboard'
    | '/evidence'
    | '/exceptions'
    | '/login'
    | '/settings'
    | '/workpapers'
    | '/controls/create'
    | '/controls/layout'
    | '/workpapers/generate'
    | '/controls/'
    | '/workpapers/reports/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CuecMappingRoute: typeof CuecMappingRoute
  DashboardRoute: typeof DashboardRoute
  EvidenceRoute: typeof EvidenceRoute
  ExceptionsRoute: typeof ExceptionsRoute
  LoginRoute: typeof LoginRoute
  SettingsRoute: typeof SettingsRoute
  WorkpapersRoute: typeof WorkpapersRouteWithChildren
  ControlsCreateRoute: typeof ControlsCreateRoute
  ControlsLayoutRoute: typeof ControlsLayoutRoute
  ControlsIndexRoute: typeof ControlsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/workpapers': {
      id: '/workpapers'
      path: '/workpapers'
      fullPath: '/workpapers'
      preLoaderRoute: typeof WorkpapersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/exceptions': {
      id: '/exceptions'
      path: '/exceptions'
      fullPath: '/exceptions'
      preLoaderRoute: typeof ExceptionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/evidence': {
      id: '/evidence'
      path: '/evidence'
      fullPath: '/evidence'
      preLoaderRoute: typeof EvidenceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cuec-mapping': {
      id: '/cuec-mapping'
      path: '/cuec-mapping'
      fullPath: '/cuec-mapping'
      preLoaderRoute: typeof CuecMappingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/controls/': {
      id: '/controls/'
      path: '/controls'
      fullPath: '/controls'
      preLoaderRoute: typeof ControlsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workpapers/generate': {
      id: '/workpapers/generate'
      path: '/generate'
      fullPath: '/workpapers/generate'
      preLoaderRoute: typeof WorkpapersGenerateRouteImport
      parentRoute: typeof WorkpapersRoute
    }
    '/controls/layout': {
      id: '/controls/layout'
      path: '/controls/layout'
      fullPath: '/controls/layout'
      preLoaderRoute: typeof ControlsLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/controls/create': {
      id: '/controls/create'
      path: '/controls/create'
      fullPath: '/controls/create'
      preLoaderRoute: typeof ControlsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workpapers/reports/$id': {
      id: '/workpapers/reports/$id'
      path: '/reports/$id'
      fullPath: '/workpapers/reports/$id'
      preLoaderRoute: typeof WorkpapersReportsIdRouteImport
      parentRoute: typeof WorkpapersRoute
    }
  }
}

interface WorkpapersRouteChildren {
  WorkpapersGenerateRoute: typeof WorkpapersGenerateRoute
  WorkpapersReportsIdRoute: typeof WorkpapersReportsIdRoute
}

const WorkpapersRouteChildren: WorkpapersRouteChildren = {
  WorkpapersGenerateRoute: WorkpapersGenerateRoute,
  WorkpapersReportsIdRoute: WorkpapersReportsIdRoute,
}

const WorkpapersRouteWithChildren = WorkpapersRoute._addFileChildren(
  WorkpapersRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CuecMappingRoute: CuecMappingRoute,
  DashboardRoute: DashboardRoute,
  EvidenceRoute: EvidenceRoute,
  ExceptionsRoute: ExceptionsRoute,
  LoginRoute: LoginRoute,
  SettingsRoute: SettingsRoute,
  WorkpapersRoute: WorkpapersRouteWithChildren,
  ControlsCreateRoute: ControlsCreateRoute,
  ControlsLayoutRoute: ControlsLayoutRoute,
  ControlsIndexRoute: ControlsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
